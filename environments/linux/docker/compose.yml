## Baseline images ##
services:
  ubuntu22.04:
    image: "local/cccl-ubuntu22.04"
    tty: true
    build:
      cache_from:
        - "local/cccl-ubuntu22.04:latest"
        - "local/cccl-ubuntu22.04:cached"
      context: .
      dockerfile: ubuntu.base.Dockerfile
      target: devenv
      args: &ubuntu22-args
        BUILDKIT_INLINE_CACHE: "1"
        USE_LLVM_INSTALLER: "1"
        ROOT_IMAGE: "nvcr.io/nvidia/cuda:12.1.0-devel-ubuntu22.04"
    deploy: &deploy-template
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ubuntu20.04:
    image: "local/cccl-ubuntu20.04"
    tty: true
    build:
      cache_from:
        - "local/cccl-ubuntu20.04:latest"
        - "local/cccl-ubuntu20.04:cached"
      context: .
      dockerfile: ubuntu.base.Dockerfile
      target: devenv
      args: &ubuntu20-args
        BUILDKIT_INLINE_CACHE: "1"
        USE_LLVM_INSTALLER: 0
        ROOT_IMAGE: "nvcr.io/nvidia/cuda:12.1.0-devel-ubuntu20.04"
    deploy: *deploy-template

  ubuntu18.04:
    image: "local/cccl-ubuntu18.04"
    tty: true
    build:
      cache_from:
        - "local/cccl-ubuntu18.04:latest"
        - "local/cccl-ubuntu18.04:cached"
      context: .
      dockerfile: ubuntu.base.Dockerfile
      target: devenv
      args: &ubuntu18-args
        BUILDKIT_INLINE_CACHE: "1"
        USE_LLVM_INSTALLER: 0
        ROOT_IMAGE: "nvcr.io/nvidia/cuda:12.1.0-devel-ubuntu18.04"
    deploy: *deploy-template


## Configured images ##
### Ubuntu 22.04 images:
  nvhpc:
    image: "libcudacxx/nvhpc"
    tty: true
    profiles: ["nvhpc", "all", "base"]
    build:
      cache_from:
        - "local/nvhpc:latest"
        - "local/nvhpc:cached"
      context: ../../../
      dockerfile: environments/linux/docker/nvhpc.base.Dockerfile
      target: libcudacxx-configured
      args:
        BUILDKIT_INLINE_CACHE: "1"
        ROOT_IMAGE: "nvcr.io/nvidia/nvhpc:23.1-devel-cuda12.0-ubuntu22.04"
    deploy: *deploy-template

  icc-2022:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/icc-2022"
    container_name: icc-2022
    profiles: ["icc-2022", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        ICC_TOOLKIT_VER: "2022.2.1"
        HOST_CXX: "icpx"

  gcc-11:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/gcc-11"
    container_name: gcc-11
    profiles: ["gcc-11", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "g++-11"

  gcc-12:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/gcc-12"
    container_name: gcc-12
    profiles: ["gcc-12", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "g++-12"

  clang-11:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/clang-11"
    container_name: clang-11
    profiles: ["clang-11", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-11"

  clang-12:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/clang-12"
    container_name: clang-12
    profiles: ["clang-12", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-12"

  clang-13:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/clang-13"
    container_name: clang-13
    profiles: ["clang-13", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-13"

  clang-14:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/clang-14"
    container_name: clang-14
    profiles: ["clang-14", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-14"

  clang-15:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/clang-15"
    container_name: clang-15
    profiles: ["clang-15", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-15"

  clang-16:
    extends:
      service: ubuntu22.04
    image: "libcudacxx/clang-16"
    container_name: clang-16
    profiles: ["clang-16", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-16"

### Ubuntu 20.04 images:

  gcc-8:
    extends:
      service: ubuntu20.04
    image: "libcudacxx/gcc-8"
    container_name: gcc-8
    profiles: ["gcc-8", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "g++-8"

  gcc-9:
    extends:
      service: ubuntu20.04
    image: "libcudacxx/gcc-9"
    container_name: gcc-9
    profiles: ["gcc-9", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "g++-9"

  gcc-10:
    extends:
      service: ubuntu20.04
    image: "libcudacxx/gcc-10"
    container_name: gcc-10
    profiles: ["gcc-10", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "g++-10"

  clang-8:
    extends:
      service: ubuntu20.04
    image: "libcudacxx/clang-8"
    container_name: clang-8
    profiles: ["clang-8", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-8"

  clang-9:
    extends:
      service: ubuntu20.04
    image: "libcudacxx/clang-9"
    container_name: clang-9
    profiles: ["clang-9", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-9"

  clang-10:
    extends:
      service: ubuntu20.04
    image: "libcudacxx/clang-10"
    container_name: clang-10
    profiles: ["clang-10", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-10"


### Ubuntu 18.04 images:
  gcc-7:
    extends:
      service: ubuntu18.04
    image: "libcudacxx/gcc-7"
    container_name: gcc-7
    profiles: ["gcc-7", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "g++-7"

  clang-7:
    extends:
      service: ubuntu18.04
    image: "libcudacxx/clang-7"
    container_name: clang-7
    profiles: ["clang-7", "all", "base"]
    build:
      context: ../../../
      dockerfile: environments/linux/docker/ubuntu.base.Dockerfile
      target: libcudacxx-configured
      args:
        HOST_CXX: "clang++-7"
